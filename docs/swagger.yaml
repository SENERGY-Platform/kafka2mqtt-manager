basePath: /
definitions:
  model.ComputedPermissions:
    properties:
      administrate:
        type: boolean
      execute:
        type: boolean
      id:
        type: string
      read:
        type: boolean
      write:
        type: boolean
    type: object
  model.Instance:
    properties:
      CreatedAt:
        type: string
      CustomMqttBaseTopic:
        type: string
      CustomMqttBroker:
        type: string
      CustomMqttPassword:
        type: string
      CustomMqttUser:
        type: string
      Description:
        type: string
      EntityName:
        type: string
      Filter:
        type: string
      FilterType:
        type: string
      ID:
        type: string
      Name:
        type: string
      Offset:
        type: string
      ServiceName:
        type: string
      Topic:
        type: string
      UpdatedAt:
        type: string
      Values:
        items:
          $ref: '#/definitions/model.Value'
        type: array
      generated:
        type: boolean
    required:
    - EntityName
    - Filter
    - FilterType
    - Name
    - Offset
    - ServiceName
    - Topic
    type: object
  model.PermissionsMap:
    properties:
      administrate:
        type: boolean
      execute:
        type: boolean
      read:
        type: boolean
      write:
        type: boolean
    type: object
  model.Resource:
    properties:
      group_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
      id:
        type: string
      role_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
      topic_id:
        type: string
      user_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
    type: object
  model.ResourcePermissions:
    properties:
      group_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
      role_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
      user_permissions:
        additionalProperties:
          $ref: '#/definitions/model.PermissionsMap'
        type: object
    type: object
  model.Value:
    properties:
      Name:
        type: string
      Path:
        type: string
    type: object
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Kafka2MQTT API
  version: "0.1"
paths:
  /instances:
    delete:
      description: Deletes a single instance
      parameters:
      - description: IDs of the instances to delete
        in: body
        name: id
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Delete instances
    get:
      description: Provides a list of instances
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Instance'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get instances
    post:
      consumes:
      - application/json
      description: Creates an instance
      parameters:
      - description: Instance to create
        in: body
        name: instance
        required: true
        schema:
          $ref: '#/definitions/model.Instance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Instance'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create an instance
    put:
      consumes:
      - application/json
      description: Updates an instance
      parameters:
      - description: Instance to update
        in: body
        name: instance
        required: true
        schema:
          $ref: '#/definitions/model.Instance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Update an instance
  /instances/{id}:
    delete:
      description: Deletes a single instance
      parameters:
      - description: ID of the instance to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Delete instance
    get:
      description: Provides a single instance
      parameters:
      - description: ID of the requested instance
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Instance'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get instance
  /permissions/accessible/kafka2mqtt:
    get:
      description: list accessible resource ids
      parameters:
      - description: checked permissions in the form of 'rwxa', defaults to 'r'
        in: query
        name: permissions
        type: string
      - description: limits size of result; 0 means unlimited
        in: query
        name: limit
        type: integer
      - description: offset to be used in combination with limit
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: list accessible resource ids
      tags:
      - permissions-kafka2mqtt
  /permissions/check/kafka2mqtt:
    get:
      description: check multiple permissions
      parameters:
      - description: Resource Ids, comma seperated
        in: query
        name: ids
        required: true
        type: string
      - description: checked permissions in the form of 'rwxa', defaults to 'r'
        in: query
        name: permissions
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: check multiple permissions
      tags:
      - permissions-kafka2mqtt
  /permissions/check/kafka2mqtt/{id}:
    get:
      description: check permission
      parameters:
      - description: Resource Id
        in: path
        name: id
        required: true
        type: string
      - description: checked permissions in the form of 'rwxa', defaults to 'r'
        in: query
        name: permissions
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: check permission
      tags:
      - permissions-kafka2mqtt
  /permissions/manage/kafka2mqtt:
    get:
      description: lists resources the user has admin rights to
      parameters:
      - description: limits size of result; 0 means unlimited
        in: query
        name: limit
        type: integer
      - description: offset to be used in combination with limit
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Resource'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: lists resources the user has admin rights to
      tags:
      - permissions-kafka2mqtt
  /permissions/manage/kafka2mqtt/{id}:
    get:
      description: get resource, requesting user must have admin right  on the resource
      parameters:
      - description: Resource Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Resource'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: get resource
      tags:
      - permissions-kafka2mqtt
    put:
      consumes:
      - application/json
      description: get resource rights, requesting user must have admin right
      parameters:
      - description: Resource Id
        in: path
        name: id
        required: true
        type: string
      - description: if set to true, the response will be sent after the corresponding
          kafka done signal has been received
        in: query
        name: wait
        type: boolean
      - description: Topic
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.ResourcePermissions'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResourcePermissions'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: set resource rights
      tags:
      - permissions-kafka2mqtt
  /permissions/permissions/kafka2mqtt:
    get:
      description: list the computed permissions to resources of the given topic (kafka2mqtt)
        and ids, group and user permissions are merged, unknown ids will get entries
        in the result
      parameters:
      - description: Resource Ids, comma seperated
        in: query
        name: ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ComputedPermissions'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: list the computed permissions to resources of the given topic (kafka2mqtt)
        and ids
      tags:
      - permissions-kafka2mqtt
  /permissions/query/permissions/kafka2mqtt:
    post:
      description: list the computed permissions to resources of the given topic (kafka2mqtt)
        and ids, group and user permissions are merged, unknown ids will get entries
        in the result
      parameters:
      - description: Resource Ids
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ComputedPermissions'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: list the computed permissions to resources of the given topic (kafka2mqtt)
        and ids
      tags:
      - permissions-kafka2mqtt
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
